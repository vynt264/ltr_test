version: "3.8"
services:
  dev:
    container_name: corejs
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:debug
    ports:
      - 3000:3000
    depends_on:
      #   - rabbitmq
      - coredb
      - redis
    networks:
      - nesjs-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
  prod:
    container_name: productions
    build:
      context: .
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    ports:
      - 3000:3000
    # depends_on:
    # - coredb
    # - redis
    networks:
      - nesjs-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
  rabbitmq:
    build: ./rabbitmq
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - nesjs-network
  coredb:
    image: mysql:8.0
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=lucky_ticket
      - MYSQL_ROOT_PASSWORD=mauFJcuf5dhRMQrjj
    ports:
      - "3306:3306"
    networks:
      - nesjs-network
    volumes:
      - coredb:/var/lib/mysql
      - ./coredb/init.sql:/docker-entrypoint-initcoredb.d/init.sql
  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - nesjs-network
networks:
  nesjs-network:
volumes:
  coredb:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local
